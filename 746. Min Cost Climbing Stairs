//Recursive(TLE)
class Solution {
public:
    
    int solve(vector<int>& cost,int n)
    {
        if(n==0)return cost[0];
        if(n==1)return cost[1];
        
        int ans=cost[n]+min(solve(cost,n-1),solve(cost,n-2));
        return ans;
        
    }
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n=cost.size();//no of stairs
        int ans=min(solve(cost,n-1),solve(cost,n-2));
        return ans;
    }
        
};

//Top-Down Approach
class Solution {
public:
    
    int solve(vector<int>& cost,int n,vector<int>&dp)
    {
        if(n==0)return cost[0];
        if(n==1)return cost[1];
        if(dp[n]!=-1)return dp[n];
        
        dp[n]=cost[n]+min(solve(cost,n-1,dp),solve(cost,n-2,dp));
        return dp[n];
        
    }
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n=cost.size();
        vector<int>dp(n+1,-1);
        int ans=min(solve(cost,n-1,dp),solve(cost,n-2,dp));
        return ans;
    }
        
};

//Bottom-Up Approach
class Solution {
public:
    
    int solve(vector<int>& cost,int n)
    {
        //Step01-Creation of dp array
        vector<int>dp(n+1);
        //Step02-base case analysis
        dp[0]=cost[0];
        dp[1]=cost[1];
        //Step03
        for(int i=2;i<n;i++)
        {
            dp[i]=cost[i]+min(dp[i-1],dp[i-2]);
        }
        
        return min(dp[n-1],dp[n-2]);
        
    }
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n=cost.size();
        int ans=solve(cost,n);
        return ans;
    }
        
};

//Space Optimization
class Solution {
public:
    
    int solve(vector<int>& cost,int n)
    {
        //Step01-Creation of dp array
        vector<int>dp(n+1);
        //Step02-base case analysis
        int prev01=cost[0];
        int prev02=cost[1];
        //Step03
        for(int i=2;i<n;i++)
        {
            int curr=cost[i]+min(prev01,prev02);
            prev01=prev02;
            prev02=curr;
        }
        
        return min(prev01,prev02);
        
    }
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int n=cost.size();
        int ans=solve(cost,n);
        return ans;
    }
        
};
