// Top-Down Approach
class Solution {
public:
    int recurrFib(int n,vector<int>& dp)
    {
       if(n==0 || n==1)return n; //Base Case 
        
       if(dp[n]!=-1)return dp[n]; 
       dp[n]=recurrFib(n-1,dp)+recurrFib(n-2,dp); //memoization
       return dp[n];
    }
    int fib(int n)
    {
        vector<int>dp(n+1);
        for(int i=0;i<n+1;i++)
        {
            dp[i]=-1;
        }
        return recurrFib(n,dp);  
    }
};

// Bottom-Up Approach
class Solution {
public:
    int fib(int n)
    {
        vector<int>dp(n+1);
        if(n<2)return n;
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<n+1;i++)
        {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];  
    }
};

// Space Optimization
class Solution {
public:
    int fib(int n)
    {
        if(n<2)return n;
        int prev01=0;
        int prev02=1;
        for(int i=2;i<n+1;i++)
        {
            int curr=prev01+prev02;
            prev01=prev02;
            prev02=curr;
        }
        return prev02;  
    }
};
