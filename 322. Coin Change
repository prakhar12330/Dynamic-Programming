//Recursive 
class Solution {
public:
    
    
    int solveRecur(vector<int>& coins,int amount)
    {
        //Base Case
        if(amount==0)return 0;
        if(amount<0) return INT_MAX;
        
        int mini=INT_MAX;
        
        for(int i=0;i<coins.size();i++)
        {
            int ans=solveRecur(coins,amount-coins[i]);
            if(ans!=INT_MAX)
            {
            mini=min(mini,1+ans);
            }
        }
        return mini;
        
    }
    int coinChange(vector<int>& coins, int amount) 
    {
       int ans=solveRecur(coins,amount);
       if(ans==INT_MAX)
          return -1;
       else 
          return ans;
    }
};

//Top Down Approach
class Solution {
public:
    
    
    int solveRecur(vector<int>& coins,int amount,vector<int>& dp)
    {
        //Base Case
        if(amount==0)return 0;
        if(amount<0) return INT_MAX;
        
        int mini=INT_MAX;
        //Step03
        if(dp[amount]!=-1)return dp[amount];
        
        for(int i=0;i<coins.size();i++)
        {
            int ans=solveRecur(coins,amount-coins[i],dp);
            if(ans!=INT_MAX)
            {
            mini=min(mini,1+ans);
            }
        }   
        //Step02-memoization
        dp[amount]=mini; 
        return mini;
        
    }
    int coinChange(vector<int>& coins, int amount) 
    {
        //Step01-Created the dp array
        vector<int>dp(amount+1,-1);
       int ans=solveRecur(coins,amount,dp);
       if(ans==INT_MAX)
          return -1;
       else 
          return ans;
    }
};

//Bottom Up Approach
class Solution {
public:
    
    int solveRecur(vector<int>& coins,int amount)
    {
        //Step01-Base Case Analysis
        vector<int>dp(amount+1,INT_MAX);
        dp[0]=0;
        for(int i=1;i<amount+1;i++)//for making a particular amount we have a three choices
        {
          for(int j=0;j<coins.size();j++) 
          {
              if(i-coins[j]>=0 && dp[i-coins[j]] !=INT_MAX)
              {
              dp[i]=min(dp[i],1+dp[i-coins[j]]);
              }
          }
        }
        if(dp[amount]==INT_MAX)return -1;
        else return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) 
    {
    
       return solveRecur(coins,amount);
       
    }
};


//No logic for space optimization
