//Recursive Approach
class Solution {
public:
    int solveRecurr(string text1,string text2,int i,int j)
    {
        //Base Case-->
        if(i==text1.size()||j==text2.size())return 0;
        
        int ans=0;
        //agar dono string me same character hai to i ar j dono pointers ko aage badhado
        if(text1[i]==text2[j])
        {
            ans= 1+solveRecurr(text1,text2,i+1,j+1);
        }
         /*agar dono string me diff. character hai to 2 possibilities hai -->
         1)yato i pointer aage badhao ar dono strings ko match kro
         2)warna j pointer aaage badhao ar dono strings ko match kro
         */
        else
        {
            ans= max(solveRecurr(text1,text2,i+1,j),solveRecurr(text1,text2,i,j+1));
        }
        return ans;
    }
    int longestCommonSubsequence(string text1, string text2)
    {
        return solveRecurr(text1,text2,0,0);
    }
};

//Top Down Approach
class Solution {
public:
    int solveRecurr(string&text1,string&text2,int i,int j, vector<vector<int>>&dp)
    {
        //Base Case-->
        if(i==text1.size()||j==text2.size())return 0;
        
        //Steo03-->
        if(dp[i][j]!=-1)return dp[i][j];
        
        int ans=0;
        
        if(text1[i]==text2[j])
        {
            ans= 1+solveRecurr(text1,text2,i+1,j+1,dp);
        }
        else
        {
            ans= max(solveRecurr(text1,text2,i+1,j,dp),solveRecurr(text1,text2,i,j+1,dp));
        }
        
        //Steo02-->
        dp[i][j]=ans;
        return dp[i][j];
    }
    int longestCommonSubsequence(string text1, string text2)
    {
        //Steo01-->
        int n=text1.size();
        int m=text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        
        return solveRecurr(text1,text2,0,0,dp);
    }
};

//Bottom Up Approach
class Solution {
public:
    
    int solveRecurr(string&text1,string&text2)
    {
      
        int n=text1.size();
        int m=text2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        for(int i=n-1;i>=0;i--)
        {
             for(int j=m-1;j>=0;j--)
            {
              int ans=0;
        
              if(text1[i]==text2[j])
              {
                 ans= 1+dp[i+1][j+1];
              }
              else
              {
                 ans= max(dp[i+1][j],dp[i][j+1]);
              }
        
        
              dp[i][j]=ans;
        
           }
        }
        
        return dp[0][0];
    }
    int longestCommonSubsequence(string text1, string text2)
    {
        return solveRecurr(text1,text2);
    }
};
//Space Optimization
class Solution {
public:
    
    int solveRecurr(string&text1,string&text2)
    {
      
        int n=text1.size();
        int m=text2.size();
        vector<int>curr(m+1,0);
        vector<int>next(m+1,0);
        for(int i=n-1;i>=0;i--)
        {
             for(int j=m-1;j>=0;j--)
            {
              int ans=0;
        
              if(text1[i]==text2[j])
              {
                 ans= 1+next[j+1];
              }
              else
              {
                 ans= max(next[j],curr[j+1]);
              }
        
        
              curr[j]=ans;
        
           }
            next=curr;
        }
        
        return next[0];
    }
    int longestCommonSubsequence(string text1, string text2)
    {
        return solveRecurr(text1,text2);
    }
};
