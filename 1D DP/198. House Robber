//Recursion
class Solution {
public:
    
    int solve(vector<int>& nums,int n)
    {
        //Base Case
        if(n<0)return 0;
        if(n==0)return nums[0];
        
        int incl=solve(nums,n-2)+nums[n];
        int excl=solve(nums,n-1)+0;
        
        return max(incl,excl);
        
    }
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        int ans =solve(nums,n-1);// n-1 indicates the last index as we will be traversing from end 
        return ans;
    }
};

//Top Down Approach
class Solution {
public:
    
    int solve(vector<int>& nums,int n,vector<int>&dp)
    {
        //Base Case
        if(n<0)return 0;
        if(n==0)return nums[0];
        
        if(dp[n]!=-1)return dp[n];//Step03
        
        int incl=solve(nums,n-2,dp)+nums[n];
        int excl=solve(nums,n-1,dp)+0;
        
        dp[n]= max(incl,excl); //Step02
        return dp[n];
        
    }
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        vector<int>dp(n,-1); //Step01
        int ans =solve(nums,n-1,dp);// n-1 indicates the last index as we will be traversing from end 
        return ans;
    }
};

//Bottom Up Approach
class Solution {
public:
    
    
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        vector<int>dp(n,0);//Step01
        if(n==0) return 0;
        if(n==1) return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        
        dp[0]=nums[0];//Step02
        dp[1] = max(nums[0],nums[1]);
        
        //Step03
        for(int i=2;i<n;i++)
        {
           
            int incl=dp[i-2]+nums[i];
            int excl=dp[i-1];
            dp[i]=max(incl,excl);
        }
        return dp[n-1];
    }
};
