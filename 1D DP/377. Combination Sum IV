//Recursive Approach
class Solution {
public:
    
    int solveRecurr(vector<int>& nums, int target)
    {
        //Base Case 
        if(target==0)return 1;
        if(target<0)return 0;
        
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=solveRecurr(nums,target-nums[i]);
        }
        return sum;
    }
    int combinationSum4(vector<int>& nums, int target)
    {
        return solveRecurr(nums,target);
    }
};

//Top-Down Approach
class Solution {
public:
    
    int solveRecurr(vector<int>& nums, int target,vector<int>& dp)
    {
        //Base Case 
        if(target==0)return 1;
        if(target<0)return 0;
        if(dp[target]!=-1)return dp[target];//Step03
        
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=solveRecurr(nums,target-nums[i],dp);
        }
        //Step02
        dp[target]=sum;
        return dp[target];
    }
    int combinationSum4(vector<int>& nums, int target)
    {
        vector<int> dp(target+1,-1);//Step01
        return solveRecurr(nums,target,dp);
    }
};

//Bottom Up Approach
class Solution {
public:

    int combinationSum4(vector<int>& nums, int target)
    {
        vector<unsigned int> dp(target+1,0);//Step01
        dp[0]=1;//Step02
        //Step03
        for(int i=1;i<=target;i++)
        {
            for(int j=0;j<nums.size();j++)
            {
             if(i-nums[j]>=0)
             {
               dp[i]+= dp[i-nums[j]];
             }
            }
        }
        
        return dp[target];
    }
};

//Space Optimization

Not Possibe


