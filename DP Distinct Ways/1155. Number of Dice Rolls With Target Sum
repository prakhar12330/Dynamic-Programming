//Recursive Approach
class Solution {
public:
    
    int solveRecurr(int diceNum,int numFaces,int targetSum)
    {
        //Base Case 01
        if(targetSum<0)return 0;
         //Base Case 02-->agar hmare pass ek bhi dice nhi hai ar hume koi targetSum chahiye 
        if(diceNum==0 && targetSum != 0)return 0;
         //Base Case 03-->agar hmare pass dices to hai pr hume koi targetSum nhi chahiye 
        if(diceNum!=0 && targetSum == 0)return 0;
        //Base Case 04-->agar hmare pass ek bhi dice nhi hai ar na hi hume koi targetSum banana hai 
        if(diceNum==0 && targetSum==0)return 1;
        
        int ans=0;
        for(int i=1;i<=numFaces;i++)
        {
            ans+=solveRecurr(diceNum-1,numFaces,targetSum-i);
        }
        return ans%1000000007;
    }
    int numRollsToTarget(int n, int k, int target)
    {
        return solveRecurr(n,k,target);
    }
};

//Top Down Approach
class Solution {
public:
    #define MOD 1000000007
    int solveMem(int diceNum,int numFaces,int targetSum,vector<vector<int>>&dp)
    {
        //Base Case 01
        if(targetSum<0)return 0;
        //Base Case 02-->agar hmare pass ek bhi dice nhi hai ar hume koi targetSum chahiye 
        if(diceNum==0 && targetSum != 0)return 0;
        //Base Case 03-->agar hmare pass dices to hai pr hume koi targetSum nhi chahiye 
        if(diceNum!=0 && targetSum == 0)return 0;
        //Base Case 04-->agar hmare pass ek bhi dice nhi hai ar na hi hume koi targetSum banana hai 
        if(diceNum==0 && targetSum==0)return 1;
        
        if(dp[diceNum][targetSum]!=-1)return dp[diceNum][targetSum];
        
        int ans=0;
        for(int i=1;i<=numFaces;i++)
        {
            ans=(ans%MOD+solveMem(diceNum-1,numFaces,targetSum-i,dp)%MOD)%MOD;
        }
        dp[diceNum][targetSum]=ans;
        return dp[diceNum][targetSum];
    }
    int numRollsToTarget(int n, int k, int target)
    {
        vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
        return solveMem(n,k,target,dp);
    }
};

//Bottom Up Approach
class Solution {
public:
    #define MOD 1000000007
    int solveTab(int d,int f,int t)
    {
        vector<vector<int>>dp(d+1,vector<int>(t+1,0));
        dp[0][0]=1;//after analysing base case
        
        for(int diceNum=1;diceNum<=d;diceNum++)
        {
            for(int targetSum=1;targetSum<=t;targetSum++)
            {
                int ans=0;
                for(int i=1;i<=f;i++)
                {
                    if(targetSum-i>=0)
                    {
                    ans=(ans%MOD+(dp[diceNum-1][targetSum-i])%MOD)%MOD;
                    }
                }
                 dp[diceNum][targetSum]=ans;
            }
        }
        return dp[d][t];
    }
    int numRollsToTarget(int n, int k, int target)
    {

        return solveTab(n,k,target);
    }
};

//Space Optimised
class Solution {
public:
    #define MOD 1000000007
    int solveTab(int d,int f,int t)
    {
        vector<int>prev(t+1,0);
        vector<int>curr(t+1,0);
        prev[0]=1;//after analysing base case
        
        for(int diceNum=1;diceNum<=d;diceNum++)
        {
            for(int targetSum=1;targetSum<=t;targetSum++)
            {
                int ans=0;
                for(int i=1;i<=f;i++)
                {
                    if(targetSum-i>=0)
                    {
                    ans=(ans%MOD+(prev[targetSum-i])%MOD)%MOD;
                    }
                }
                 curr[targetSum]=ans;
            }
            prev=curr;
        }
        return prev[t];
    }
    int numRollsToTarget(int n, int k, int target)
    {

        return solveTab(n,k,target);
    }
};
