//Recursive Approach Using Operation Number
class Solution {
public:
    
    int solveRecurr(int idx,int operationNo,int k, vector<int>& prices)
    {
        if(idx==prices.size())return 0;
        
        if(operationNo==2*k)return 0;
        
        int profit=0;
        if(operationNo%2==0)
        {
            int buyKaro=-prices[idx]+solveRecurr(idx+1,operationNo+1,k,prices);
            int skipKaro=0+solveRecurr(idx+1,operationNo,k,prices);
            profit=max(buyKaro,skipKaro);
        }
        else
        {
            int sellKaro=+prices[idx]+solveRecurr(idx+1,operationNo+1,k,prices);
            int skipKaro=0+solveRecurr(idx+1,operationNo,k,prices);
            profit=max(sellKaro,skipKaro);
        }
        
        return profit;
    }
    int maxProfit(int k, vector<int>& prices)
    {
        return solveRecurr(0,0,k,prices);
    }
};

//Top Down Approach Using Operation Number
class Solution {
public:
    
    int solveRecurr(int idx,int operationNo,int k, vector<int>& prices, vector<vector<int>>&dp)
    {
        if(idx==prices.size())return 0;
        
        if(operationNo==2*k)return 0;
        
         //Step03-->
        if( dp[idx][operationNo]!=-1)return  dp[idx][operationNo];
        
        int profit=0;
        if(operationNo%2==0)
        {
            int buyKaro=-prices[idx]+solveRecurr(idx+1,operationNo+1,k,prices,dp);
            int skipKaro=0+solveRecurr(idx+1,operationNo,k,prices,dp);
            profit=max(buyKaro,skipKaro);
        }
        else
        {
            int sellKaro=+prices[idx]+solveRecurr(idx+1,operationNo+1,k,prices,dp);
            int skipKaro=0+solveRecurr(idx+1,operationNo,k,prices,dp);
            profit=max(sellKaro,skipKaro);
        }
         //Step02-->
        dp[idx][operationNo]=profit;
        return  dp[idx][operationNo];
    }
    int maxProfit(int k, vector<int>& prices)
    {
        //Step01-->
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2*k+1,-1));
        
        return solveRecurr(0,0,k,prices,dp);
    }
};

//Bottom Up Approach Using Operation Number
class Solution {
public:
    
     int solveRecurr(int k, vector<int>& prices)
     {
        //Step01-->
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2*k+1,0));
         for(int idx=n-1;idx>=0;idx--)
         {
             for(int operationNo=0;operationNo<2*k;operationNo++)
             {
                 int profit=0;
                if(operationNo%2==0)
                {
                  int buyKaro=-prices[idx]+dp[idx+1][operationNo+1];
                  int skipKaro=0+dp[idx+1][operationNo];
                  profit=max(buyKaro,skipKaro);
                 }
                else
                 {
                  int sellKaro=+prices[idx]+dp[idx+1][operationNo+1];
                  int skipKaro=0+dp[idx+1][operationNo];
                  profit=max(sellKaro,skipKaro);
                 }
          
               dp[idx][operationNo]=profit;
             }
         }
         
         return dp[0][0];
    }
    int maxProfit(int k, vector<int>& prices)
    {
      
        return solveRecurr(k,prices);
    }
};

//Space Optimization Using Operation Number
class Solution {
public:
    
     int solveRecurr(int k, vector<int>& prices)
     {
        
         int n=prices.size();
         vector<int>curr(2*k+1,0);
         vector<int>next(2*k+1,0);
         for(int idx=n-1;idx>=0;idx--)
         {
             for(int operationNo=0;operationNo<2*k;operationNo++)
             {
                 int profit=0;
                if(operationNo%2==0)
                {
                  int buyKaro=-prices[idx]+next[operationNo+1];
                  int skipKaro=0+next[operationNo];
                  profit=max(buyKaro,skipKaro);
                 }
                else
                 {
                  int sellKaro=+prices[idx]+next[operationNo+1];
                  int skipKaro=0+next[operationNo];
                  profit=max(sellKaro,skipKaro);
                 }
          
              curr[operationNo]=profit;
             }
             next=curr;
         }
         
         return next[0];
    }
    int maxProfit(int k, vector<int>& prices)
    {
      
        return solveRecurr(k,prices);
    }
};
