//Recursive Approach
class Solution {
public:
    int solveRecurr(int idx,int buy,vector<int>& prices,int limit)
    {
        //Base Case-->
        if(idx==prices.size())return 0;
        if(limit==0)return 0;
        
        int profit=0;
        if(buy==1)//Buy is a parameter
        {
            int buyKaro=-prices[idx]+solveRecurr(idx+1,0,prices,limit);
            int skipKaro=0+solveRecurr(idx+1,1,prices,limit);
            profit=max(buyKaro,skipKaro);
        }
        else
        {
            int sellKaro=+prices[idx]+solveRecurr(idx+1,1,prices,limit-1);
            int skipKaro=0+solveRecurr(idx+1,0,prices,limit);
            profit=max(sellKaro,skipKaro);
        }
        return profit;
    }
    int maxProfit(vector<int>& prices) 
    {
        return solveRecurr(0,1,prices,2);
    }
};

//Top Down Approach
class Solution {
public:
    int solveRecurr(int idx,int buy,vector<int>& prices,int limit,vector<vector<vector<int>>>&dp)
    {
        //Base Case-->
        if(idx==prices.size())return 0;
        if(limit==0)return 0;
        
        //Step03
        if(dp[idx][buy][limit]!=-1)
        {
            return dp[idx][buy][limit];
        }
        int profit=0;
        if(buy==1)//Buy is a parameter
        {
            int buyKaro=-prices[idx]+solveRecurr(idx+1,0,prices,limit,dp);
            int skipKaro=0+solveRecurr(idx+1,1,prices,limit,dp);
            profit=max(buyKaro,skipKaro);
        }
        else
        {
            int sellKaro=+prices[idx]+solveRecurr(idx+1,1,prices,limit-1,dp);
            int skipKaro=0+solveRecurr(idx+1,0,prices,limit,dp);
            profit=max(sellKaro,skipKaro);
        }
        //Step02
        dp[idx][buy][limit]=profit;
        return dp[idx][buy][limit];
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));//Step01
        return solveRecurr(0,1,prices,2,dp);
    }
};

//Bottom Up Approach
class Solution {
public:
    int solveRecurr(vector<int>& prices)
    {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));//Step01
        for(int idx=n-1;idx>=0;idx--)
        {
            for(int buy=0;buy<=1;buy++)
            {
              for(int limit=1;limit<=2;limit++)
              {
                  int profit=0;
                  if(buy==1)//Buy is a parameter
                  {
                     int buyKaro=-prices[idx]+dp[idx+1][0][limit];
                     int skipKaro=0+dp[idx+1][1][limit];
                     profit=max(buyKaro,skipKaro);
                  }
                  else
                  {
                   int sellKaro=+prices[idx]+dp[idx+1][1][limit-1];
                   int skipKaro=0+dp[idx+1][0][limit];
                   profit=max(sellKaro,skipKaro);
                  }
                 
                 dp[idx][buy][limit]=profit;
                                               
               }
            }
        }
        return dp[0][1][2];
    }
    int maxProfit(vector<int>& prices) 
    {
        
        return solveRecurr(prices);
    }
};
//Space Optimization
class Solution {
public:
    int solveRecurr(vector<int>& prices)
    {
        int n=prices.size();
        //Step01
        vector<vector<int>>curr(2,vector<int>(3,0));
        vector<vector<int>>next(2,vector<int>(3,0));
        for(int idx=n-1;idx>=0;idx--)
        {
            for(int buy=0;buy<=1;buy++)
            {
              for(int limit=1;limit<=2;limit++)
              {
                  int profit=0;
                  if(buy==1)//Buy is a parameter
                  {
                     int buyKaro=-prices[idx]+next[0][limit];
                     int skipKaro=0+next[1][limit];
                     profit=max(buyKaro,skipKaro);
                  }
                  else
                  {
                   int sellKaro=+prices[idx]+next[1][limit-1];
                   int skipKaro=0+next[0][limit];
                   profit=max(sellKaro,skipKaro);
                  }
                 
                curr[buy][limit]=profit;
                                               
               }
            next=curr;
            }
        }
        return next[1][2];
    }
    int maxProfit(vector<int>& prices) 
    {
        
        return solveRecurr(prices);
    }
};
