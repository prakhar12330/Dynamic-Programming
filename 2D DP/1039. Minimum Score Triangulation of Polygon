//Recursive Approach
class Solution {
public:
    int solveRecurr(vector<int>& values,int i,int j)
    {
        //Base Case
        if(i+1==j)return 0;//First vertex ke just baad hai end vertex {First*___________*end}
        int ans=INT_MAX;
        for(int k=i+1;k<j;k++)
        {
           ans=min(ans,values[i]*values[j]*values[k]+solveRecurr(values,i,k)+solveRecurr(values,k,j)); 
        }
        return ans;
    }
    int minScoreTriangulation(vector<int>& values) 
    {
        return solveRecurr(values,0,values.size()-1);
    }
};

//Top Down Approach
class Solution {
public:
    int solveMem(vector<int>& values,int i,int j,vector<vector<int>>&dp)
    {
        //Base Case
        if(i+1==j)return 0;
        int ans=INT_MAX;
        if(dp[i][j]!=-1)return dp[i][j];
        for(int k=i+1;k<j;k++)
        {
           ans=min(ans,values[i]*values[j]*values[k]+solveMem(values,i,k,dp)+solveMem(values,k,j,dp)); 
        }
        dp[i][j]=ans;
        return  dp[i][j];
    }
    int minScoreTriangulation(vector<int>& values) 
    {
        int n=values.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        return solveMem(values,0,n-1,dp);
    }
};

//Bottom Up Approach
class Solution {
public:
    int solveTab(vector<int>& values)
    {
        int n=values.size();
        vector<vector<int>>dp(n,vector<int>(n,0));
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i+2;j<n;j++)
            {
                int ans=INT_MAX;
                for(int k=i+1;k<j;k++)
                 {
                    ans=min(ans,values[i]*values[j]*values[k]+dp[i][k]+dp[k][j]); 
                 }
                 dp[i][j]=ans;
            }
        }
        return dp[0][n-1];//starting se yahi goal tha ki i ko zero pe rakh kr ar j ko n-1 pr rakh kr ans nikalo
    }
    int minScoreTriangulation(vector<int>& values) 
    {
        return solveTab(values);
    }
};
//Space Optimiztion Not possible
