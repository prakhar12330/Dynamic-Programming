//Recursive Approach
class Solution {
public:
    int solveRecurr(vector<int>& nums,int currInsertedIdx,int lastInsertedIdx)
        //currentInsertedIdx-->jo element hum choose krne jaarhe hai, usko point krne wala pointer
        //lastInsertedIdx-->jo element humare choosed vector me pada hai, usko point krne wala pointer
    {
        //Base Case-->jab pointer nums array ko cross krke end me pahuch jaye
        if(currInsertedIdx==nums.size())
        {
            return 0;
        }
        int include=0;
        if(lastInsertedIdx==-1 || nums[currInsertedIdx]>nums[lastInsertedIdx])
        {
            include=1+solveRecurr(nums,currInsertedIdx+1,currInsertedIdx);
            //currentInsertedIdx wala badhega hi badhega ar lastInsertedIdx ab currentInsertedIdx bn jayega
        }
        int exclude=0+solveRecurr(nums,currInsertedIdx+1,lastInsertedIdx);
        
        return max(include,exclude);
    }
    int lengthOfLIS(vector<int>& nums)
    {
        return solveRecurr(nums,0,-1);
    }
};

//Top Down Approach
class Solution {
public:
    int solveMem(vector<int>& nums,int currInsertedIdx,int lastInsertedIdx,vector<vector<int>>&dp)
      {
        if(currInsertedIdx==nums.size())
        {
            return 0;
        }
        
        if(dp[currInsertedIdx][lastInsertedIdx+1]!=-1)return dp[currInsertedIdx][lastInsertedIdx+1];
        
        int include=0;
        if(lastInsertedIdx==-1 || nums[currInsertedIdx]>nums[lastInsertedIdx])
        {
            include=1+solveMem(nums,currInsertedIdx+1,currInsertedIdx,dp);
        }
        int exclude=0+solveMem(nums,currInsertedIdx+1,lastInsertedIdx,dp);
        
        dp[currInsertedIdx][lastInsertedIdx+1]= max(include,exclude);
        return dp[currInsertedIdx][lastInsertedIdx+1];
     }
    int lengthOfLIS(vector<int>& nums)
    {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return solveMem(nums,0,-1,dp);
    }
};

//Bottom Up Approach
class Solution {
public:
     int solveTab(vector<int>& nums)
      {
        int n=nums.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        
         for(int currInsertedIdx=n-1;currInsertedIdx>=0;currInsertedIdx--)
         {
             for(int lastInsertedIdx=currInsertedIdx-1;lastInsertedIdx>=-1;lastInsertedIdx--)
             {
                int include=0;
                if(lastInsertedIdx==-1 || nums[currInsertedIdx]>nums[lastInsertedIdx])
                {
                 include=1+dp[currInsertedIdx+1][currInsertedIdx+1];
                }  
                int exclude=0+dp[currInsertedIdx+1][lastInsertedIdx+1];
        
                dp[currInsertedIdx][lastInsertedIdx+1]= max(include,exclude);
             }
         }
         return dp[0][0];
        
     }
    int lengthOfLIS(vector<int>& nums)
    {
        return solveTab(nums);
    }
};

//Space Optimization
class Solution {
public:
     int solveTab(vector<int>& nums)
      {
        int n=nums.size();
        vector<int>curr(n+1,0);
        vector<int>next(n+1,0);
        
         for(int currInsertedIdx=n-1;currInsertedIdx>=0;currInsertedIdx--)
         {
             for(int lastInsertedIdx=currInsertedIdx-1;lastInsertedIdx>=-1;lastInsertedIdx--)
             {
                int include=0;
                if(lastInsertedIdx==-1 || nums[currInsertedIdx]>nums[lastInsertedIdx])
                {
                 include=1+next[currInsertedIdx+1];
                }  
                int exclude=0+next[lastInsertedIdx+1];
        
                curr[lastInsertedIdx+1]= max(include,exclude);
             }
             next=curr;
         }
         return next[0];
        
     }
    int lengthOfLIS(vector<int>& nums)
    {
        return solveTab(nums);
    }
};

//Optimised Approach-->DP+Binary Search
class Solution {
public:
     int solveOptimisation(vector<int>& nums)
     {
        int n=nums.size(); 
        if(n==0)return 0;
        vector<int>ans;
        ans.push_back(nums[0]);
         for(int i=1;i<n;i++)
         {
             if(nums[i]>ans.back())
             {
                 ans.push_back(nums[i]);
             }
             else
             {
                 //Find The Just Bada Element In The Ans
                 int index=lower_bound(ans.begin(),ans.end(),nums[i])-ans.begin();
                 ans[index]=nums[i];
             }
         }
         return ans.size();
        
     }
    int lengthOfLIS(vector<int>& nums)
    {
        return  solveOptimisation(nums);
    }
};
