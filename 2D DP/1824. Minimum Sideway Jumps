//Recursive Approach
class Solution {
public:
    
    int solveRecurr(vector<int>& obstacles,int currlane,int pos)
    {
        //Base Case-->agar tumhara frog final pos pe pahuch gya tb
        int n=obstacles.size()-1;
        if(pos==n)return 0;
        
        //Case01-agar tumhare aage koi obstacle hi nhi hai tb
        if(obstacles[pos+1] !=currlane)
        {
           return solveRecurr(obstacles,currlane,pos+1); 
        }
         //Case01-agar aage koi obstacle hai tb
        else
        {
            int ans=INT_MAX;
           //up-same pos-down-->teeno jagah me se ek pe kahi bhi move kara skte hai
            for(int i=1;i<=3;i++)
            {
                if(currlane!=i && obstacles[pos]!=i)
                {
                    ans=min(ans,1+solveRecurr(obstacles,i,pos));
                }
            }
            return ans;
        }
    }
    int minSideJumps(vector<int>& obstacles)
    {
        return solveRecurr(obstacles,2,0);//frog initially hmara position no.0 pe hai ar lane no.2 pe hai
    }
};

//Top Down Approach
class Solution {
public:
    
    int solveRecurr(vector<int>& obstacles,int currlane,int pos,vector<vector<int>>&dp)
    {
        //Base Case-->agar tumhara frog final pos pe pahuch gya tb
        int n=obstacles.size()-1;
        if(pos==n)return 0;
        
        if(dp[currlane][pos]!=-1)return dp[currlane][pos];
        
        //Case01-agar tumhare aage koi obstacle hi nhi hai tb
        if(obstacles[pos+1] !=currlane)
        {
           return solveRecurr(obstacles,currlane,pos+1,dp); 
        }
         //Case01-agar aage koi obstacle hai tb
        else
        {
            int ans=INT_MAX;
           //up-same pos-down-->teeno jagah me se ek pe kahi bhi move kara skte hai
            for(int i=1;i<=3;i++)
            {
                if(currlane!=i && obstacles[pos]!=i)
                {
                    ans=min(ans,1+solveRecurr(obstacles,i,pos,dp));
                }
            }
            dp[currlane][pos]=ans;
            return dp[currlane][pos];
            
        }
    }
    int minSideJumps(vector<int>& obstacles)
    {
        vector<vector<int>>dp(4,vector<int>(obstacles.size(),-1));
        return solveRecurr(obstacles,2,0,dp);//frog initially hmara position no.0 pe hai ar lane no.2 pe hai
    }
};

//Bottom Up Approach
class Solution {
public:
    
    
    int solveTab(vector<int>& obstacles)
    {
        int n=obstacles.size()-1;//End Pos
        vector<vector<int>>dp(4,vector<int>(obstacles.size(),-1));
        
        dp[0][n]=0;
        dp[1][n]=0;
        dp[2][n]=0;
        dp[3][n]=0;
        
        for(int currpos=n-1;currpos>=0;currpos--)
        {
            for(int currlane=1;currlane<=3;currlane++)
            {
               if(obstacles[currpos+1] !=currlane)
                 {
                    dp[currlane][currpos]=dp[currlane][currpos+1]; 
                 }
                else
                 {
                     int ans=INT_MAX;

                     for(int i=1;i<=3;i++)
                        {
                          if(currlane!=i && obstacles[currpos]!=i)
                         {
                            ans=min(ans,1+dp[i][currpos+1]);
                         }
                          dp[currlane][currpos]= ans; 
                         }
            
               } 
            }
        }
        
        return min(dp[2][0],min(1+dp[1][0],1+dp[3][0]));
        
    }
    int minSideJumps(vector<int>& obstacles)
    {
        return solveTab(obstacles);//frog initially hmara position no.0 pe hai ar lane no.2 pe hai
    }
};

//Space Optimization
class Solution {
public:
    
    
    int solveTab(vector<int>& obstacles)
    {
        int n=obstacles.size()-1;
       vector<int>curr(4,INT_MAX);
       vector<int>next(4,INT_MAX);
        
        next[0]=0;
        next[1]=0;
        next[2]=0;
        next[3]=0;
        
        for(int currpos=n-1;currpos>=0;currpos--)
        {
            for(int currlane=1;currlane<=3;currlane++)
            {
               if(obstacles[currpos+1] !=currlane)
                 {
                   curr[currlane]=next[currlane]; 
                 }
                else
                 {
                     int ans=INT_MAX;

                     for(int i=1;i<=3;i++)
                        {
                          if(currlane!=i && obstacles[currpos]!=i)
                         {
                            ans=min(ans,1+next[i]);
                         }
                          curr[currlane]= ans; 
                         }
            
               } 
            }
            next=curr;
        }
        
        return min(next[2],min(1+next[1],1+next[3]));
        
    }
    int minSideJumps(vector<int>& obstacles)
    {
        return solveTab(obstacles);//frog initially hmara position no.0 pe hai ar lane no.2 pe hai
    }
};
